# This code will compute the eXclusive OR (XOR) of 123 and 36, and will return the result as a signed byte integer into the general purpose memory mapped IO location 1

# To XOR, we have to use 4 NAND gates in 3 layers
# First, we run each input through NAND#1
# Next, we make a new NAND#2 gate, with inputs from In 1 and NAND#1. NAND#3 uses In 2 and NAND#1
# Finally, we use NAND#4 to take the outputs from NAND#2 and NAND#3, and hook it to the outputs

# First, save operands into memory
MOV @In1, 123        # 123 (input A) is in M[In1] now
MOV @In2, 36	     # 36(input B) is in M[In2] now

# Copy to registers
MOV A, @In1
MOV B, @In2

# Do NAND#1
NAND A, @In2		# NAND(123, 36) (NAND#1) is in A now

# Save NAND#1 for later
MOV @Nand1, A       # NAND#1 is in M[Nand1] now

# We have the output of NAND#1 and In 2 available, lets get NAND#3 and store it in memory
NAND A, B
MOV @Nand3, A	    # NAND#3 is in M[Nand3] now

# We need NAND#2 now, we need to load In 1 and NAND#1
MOV A, @In1
MOV B, @Nand1

# Get NAND#2
NAND A, B			# NAND#2 is in A now

# Load NAND#3 alongside NAND#2
MOV B, @Nand3

# Get NAND#4 (our XOR result)
NAND A, B			# Final XOR result is in A now

# Move to final location
MOV @IO1, A		# It is finally in the output location

# Do an infinite loop to halt
(LOOP)
JMP LOOP