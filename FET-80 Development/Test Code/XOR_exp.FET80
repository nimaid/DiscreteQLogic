# This code will compute the eXclusive OR (XOR) of 123 and 36, and will return the result as a signed byte integer into memory location 0xFF02

# ~~~~ ASSEMBLER CONSTANTS ~~~~
#   
#   R0 = 0
#   R1 = 1
#   R2 = 2
#   R3 = 3
#   R4 = 4
#   R5 = 5
#   R6 = 6
#   R7 = 7
#   R8 = 8
#   R9 = 9
#   R10 = 10
#   R11 = 11
#   R12 = 12
#   R13 = 13
#   R14 = 14
#   R15 = 15
#   
#   



# To XOR, we have to use 4 NAND gates in 3 layers
# First, we run each input through NAND#1
# Next, we make a new NAND#2 gate, with inputs from A and NAND#1. NAND#3 uses B and NAND#1
# Finally, we use NAND#4 to take the outputs from NAND#2 and NAND#3, and hook it to the outputs

# First, save operands into memory
MEM R0
MOV M, 123          # 123 (input A) is in R0 now
MEM R1
MOV M, 36			# 36(input B) is in R0 now

# Copy to A and B
MEM R0
MOV A, M
MEM R1
MOV B, M

# Do NAND#1
NAND A, B			# NAND(123, 36) (NAND#1) is in A now

# Save NAND#1 for later
MEM R2
MOV M, A            # NAND#1 is in R2 now

# We have the output of NAND#1 and B available, lets get NAND#3 and store it in memory
NAND A, B
MEM R3
MOV M, A			# NAND#3 is in R3 now

# We need NAND#2 now, we need to load A and NAND#1
MEM R0
MOV A, M
MEM R2
MOV B, M

# Get NAND#2
NAND A, B			# NAND#2 is in A now

# Load NAND#3 alongside NAND#2
MEM R3
MOV B, M

# Get NAND#4 (our XOR result)
NAND A, B			# Final XOR result is in A now

# Move to final location
MEM 0xFF02
MOV M, A			# It is finally in the output location

# Do an infinite loop to halt
(LOOP)
JMP LOOP